"""
State management module for the RAG (Retrieval-Augmented Generation) system.

This module defines the data structures used to manage state throughout
the RAG workflow using LangGraph. It provides type-safe state definitions
for input, output, and intermediate processing stages.
"""

from typing import Annotated, List, TypedDict

from langchain_core.messages import (
    BaseMessage,
)
from langgraph.graph import add_messages


class InputState(TypedDict):
    """
    Input state definition for RAG agent workflow.

    Defines the structure of data that enters the RAG processing pipeline.
    This includes the user's query and role information for proper message
    handling in conversational contexts.

    Attributes:
        query (str): The user's question or input text that needs to be
                    processed by the RAG system.
        role (str): The role of the message sender, typically "user" or "assistant".
                   Used for maintaining conversation context and proper message formatting.
    """

    query: str  # User's question or search query
    role: str  # Message role: "user" or "assistant"


class OutputState(TypedDict):
    """
    Output state definition for RAG agent workflow.

    Defines the structure of the final response from the RAG system.
    Contains the generated answer that combines retrieved context with
    LLM-generated content.

    Attributes:
        answer (str): The final response generated by the RAG system,
                     combining retrieved document context with LLM reasoning
                     to provide a comprehensive answer to the user's query.
    """

    answer: str  # Final generated response


class OverallState(InputState, OutputState):
    """
    Comprehensive state definition that encompasses the entire RAG workflow.

    This state class inherits from both InputState and OutputState, providing
    a complete view of the processing pipeline. It includes all input data,
    intermediate processing results, and final outputs.

    The state is designed to work with LangGraph's state management system,
    allowing for complex workflows with multiple processing steps while
    maintaining data consistency and type safety.

    Attributes:
        query (str): Inherited from InputState - the user's input query.
        role (str): Inherited from InputState - the message role.
        answer (str): Inherited from OutputState - the final generated answer.
        messages (List[BaseMessage]): Annotated list of conversation messages
                                     that accumulates throughout the workflow.
                                     Uses LangGraph's add_messages for proper
                                     message handling and state updates.

    Note:
        The messages field uses LangGraph's add_messages annotation, which
        provides intelligent message accumulation, handling duplicates and
        maintaining conversation history properly.
    """

    # Annotated list of messages with automatic accumulation behavior
    messages: Annotated[List[BaseMessage], add_messages]
